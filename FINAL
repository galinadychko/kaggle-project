{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing and converting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 575,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# path = \"C:\\\\users\\\\Galia\\\\desktop\\\\kaggle\\\\data\\\\egonets\"\n",
    "path = \"/home/administrator/Desktop/kaggle/data/egonets\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 535,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_all = \"/home/administrator/Desktop/kaggle/data/Training/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "metadata": {},
   "outputs": [],
   "source": [
    "# path_tr = \"C:\\\\Users\\\\Galia\\\\Desktop\\\\kaggle\\\\data\\\\Training\"\n",
    "path_tr = \"/home/administrator/Desktop/kaggle/data/Training/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_test = \"/home/administrator/Desktop/kaggle/data/testSet_users_friends.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 538,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 539,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import re\n",
    "import scipy \n",
    "from scipy.sparse import *\n",
    "from operator import itemgetter\n",
    "from sklearn.cluster import KMeans\n",
    "import numpy as np\n",
    "import sys\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 540,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratio = 0.67\n",
    "#split data\n",
    "def split_data(path_all, ratio):\n",
    "    files = [fyle[:-len(\".circles\")] for fyle in listdir(path_all)]\n",
    "    tsize = int(len(files) * ratio)\n",
    "    indices = np.random.permutation(files)\n",
    "    training, tested = indices[:tsize], indices[tsize:]    \n",
    "    return training, tested"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "metadata": {},
   "outputs": [],
   "source": [
    "splited_numbers = split_data(path_all, ratio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 572,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#The function takes as argument an integer in the range 0-109 and path where egonets are located \n",
    "#returns a networkx graph of the friends network of the user\n",
    "def build_graph(k, path):\n",
    "    try:\n",
    "        onlyfiles = [fyle for fyle in listdir(path) if fyle.endswith(\".egonet\")]\n",
    "        onlyfiles_no = [fyle[:-len(\".egonet\")] for fyle in listdir(path) if fyle.endswith(\".egonet\")]\n",
    "    except:\n",
    "        print(\"Problems with detecring files UserID.egonets at the specified path\")\n",
    "    edges = []\n",
    "    nodes = []\n",
    "    n = onlyfiles_no.index(str(k))\n",
    "    egonets = onlyfiles\n",
    "    egonet = egonets[n]\n",
    "    ego = int(re.match( r'([0-9]+).egonet', egonet).group(1))\n",
    "    m = open(os.path.join(path,egonet), \"r\")\n",
    "    friends = [line[:-1].replace(\":\", \"\").split(\" \") for line in m.readlines()]\n",
    "    friends = list(list(map(int, friend[:1])) if friend[1] == '' else list(map(int, friend)) for friend in friends)\n",
    "    edges += [(ego,friend[0]) for friend in friends]\n",
    "    for friend in friends:\n",
    "        edges += [(friend[0], user) for user in friend[1:] if len(friend)>1] \n",
    "    nodes += list(itertools.chain.from_iterable(friends)) + [ego]\n",
    "    edges = list(set(tuple(sorted(edge)) for edge in edges))        \n",
    "    nodes = list(set(nodes))\n",
    "    G = nx.Graph()\n",
    "    G.add_nodes_from(nodes)\n",
    "    G.add_edges_from(edges)\n",
    "    \n",
    "    return G, nodes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#generates a CSV file with the Adjacency matrix representation of G\n",
    "\n",
    "def to_R(k, path):\n",
    "    G, nodes = build_graph(k, path)\n",
    "    A = nx.to_numpy_matrix(G)\n",
    "    df = pd.DataFrame(A, index = nodes, columns = nodes)\n",
    "    df.to_csv('/home/administrator/Dropbox/DataRoot University/kaggle/NEW/R_training/graph-{}.csv'.format(k),index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#get the training datas ego`s id\n",
    "onlyfiles = splited_numbers[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create adj_matrices for training data\n",
    "if __name__ == '__main__':\n",
    "    for k in onlyfiles:\n",
    "        to_R(int(k), path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 568,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create adj_matrices for test data\n",
    "test_files = splited_numbers[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 574,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#generates a CSV file with the Adjacency matrix representation of G\n",
    "\n",
    "def to_R(k, path):\n",
    "    G, nodes = build_graph(k, path)\n",
    "    A = nx.to_numpy_matrix(G)\n",
    "    df = pd.DataFrame(A, index = nodes, columns = nodes)\n",
    "    df.to_csv('/home/administrator/Dropbox/DataRoot University/kaggle/NEW/R_test/graph-{}.csv'.format(k),index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 576,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create adj_matrices for test data\n",
    "if __name__ == '__main__':\n",
    "    for k in test_files:\n",
    "        to_R(int(k), path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Work with results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 577,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "from collections import defaultdict\n",
    "import random\n",
    "from pylab import *\n",
    "import sys\n",
    "from munkres import Munkres\n",
    "import numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 578,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, join"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 579,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 580,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 590,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path = \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/fast greedy/239.csv\"\n",
    "path_circle = \"/home/administrator/Desktop/kaggle/data/Training/239.circles\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 591,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_prediction(path):\n",
    "    circles = []\n",
    "    df = pd.read_csv(path, names = [\"friend\", \"group\"], skiprows = 1)\n",
    "    ego = df[\"friend\"][0]\n",
    "    df = df.drop(df.index[0])\n",
    "    num_groups = df[\"group\"].max(axis = 0)\n",
    "    for i in range(1, num_groups + 1):\n",
    "        circles += [set(df[\"friend\"][df[\"group\"] == i])]\n",
    "    return ego, circles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 4, 5, 5)"
      ]
     },
     "execution_count": 701,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr1 = read_prediction(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/leading eigenv/11364.csv\")\n",
    "pr2 = read_prediction(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/fast greedy/11364.csv\")\n",
    "pr3 = read_prediction(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/louvain/11364.csv\")\n",
    "pr4 = read_prediction(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/spinglass/11364.csv\")\n",
    "\n",
    "len(pr1[1]), len(pr2[1]), len(pr3[1]), len(pr4[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 595,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_true_circles(path_circle):\n",
    "    df = pd.read_csv(path_circle, header=None)\n",
    "    circles = []\n",
    "    for i in range(df.shape[0]):\n",
    "        l = list(df.iloc[i,:])\n",
    "        l = l[0].split(\" \")\n",
    "        l = l[1:]\n",
    "        l = list(map(int, l))\n",
    "        circles += [set(l)]\n",
    "    return circles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 596,
   "metadata": {},
   "outputs": [],
   "source": [
    "tr = read_true_circles(path_circle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 586,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Compute the loss for one user (i.e., one set of circles for one ego-network)\n",
    "# usersPerCircle: list of sets of users (groundtruth). Order doesn't matter.\n",
    "# usersPerCircleP: list of sets of users (predicted). Order doesn't matter.\n",
    "def loss1(usersPerCircle, usersPerCircleP):\n",
    "  #psize: either the number of groundtruth, or the number of predicted circles (whichever is larger)\n",
    "  psize = max(len(usersPerCircle),len(usersPerCircleP)) # Pad the matrix to be square\n",
    "  # mm: matching matrix containing costs of matching groundtruth circles to predicted circles.\n",
    "  #     mm[i][j] = cost of matching groundtruth circle i to predicted circle j\n",
    "  mm = numpy.zeros((psize,psize))\n",
    "  # mm2: copy of mm since the Munkres library destroys the data during computation\n",
    "  mm2 = numpy.zeros((psize,psize))\n",
    "  for i in range(psize):\n",
    "    for j in range(psize):\n",
    "      circleP = set() # Match to an empty circle (delete all users)\n",
    "      circle = set() # Match to an empty circle (add all users)\n",
    "      if (i < len(usersPerCircleP)):\n",
    "        circleP = usersPerCircleP[i]\n",
    "      if (j < len(usersPerCircle)):\n",
    "        circle = usersPerCircle[j]\n",
    "      nedits = len(circle.union(circleP)) - len(circle.intersection(circleP)) # Compute the edit distance between the two circles\n",
    "      mm[i][j] = nedits\n",
    "      mm2[i][j] = nedits\n",
    "\n",
    "  if psize == 0:\n",
    "    return 0 # Edge case in case there are no circles\n",
    "  else:\n",
    "    m = Munkres()\n",
    "    #print mm2 # Print the pairwise cost matrix\n",
    "    indices = m.compute(mm) # Compute the optimal alignment between predicted and groundtruth circles\n",
    "    editCost = 0\n",
    "    for row, column in indices:\n",
    "      #print row,column # Print the optimal value selected by matching\n",
    "      editCost += mm2[row][column]\n",
    "    return int(editCost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "104"
      ]
     },
     "execution_count": 597,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss1(tr, pr[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 600,
   "metadata": {},
   "outputs": [],
   "source": [
    "def comparing_results(true_path, pred_path):\n",
    "    tr_files = [fyle for fyle in listdir(true_path)]\n",
    "    pr_files = [fyle for fyle in listdir(pred_path)]\n",
    "    \n",
    "    tr_f_names = [fyle[:-len(\".circles\")] for fyle in listdir(true_path) if fyle.endswith('.circles')]\n",
    "    pr_f_names = [fyle[:-len(\".csv\")] for fyle in listdir(pred_path) if fyle.endswith('.csv')]\n",
    "    \n",
    "    if len(tr_f_names) != len(pr_f_names):\n",
    "        print(\"Different numbers of predicted and true files\")\n",
    "    \n",
    "    cost_metr = []\n",
    "    losses = 0\n",
    "    for pr_f_name in pr_f_names:\n",
    "        tr_p = os.path.join(true_path,pr_f_name + '.circles')\n",
    "        pr_p = os.path.join(pred_path,pr_f_name + '.csv')\n",
    "        \n",
    "        tr = read_true_circles(tr_p)\n",
    "        pr = read_prediction(pr_p)\n",
    "        ll = loss1(tr, pr[1])\n",
    "        cost_metr += [(pr_f_name, ll)]\n",
    "        losses += ll\n",
    "    return cost_metr, losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11071"
      ]
     },
     "execution_count": 661,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_fgr, total_fgr = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/fast greedy\")\n",
    "total_fgr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11193"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_louv, total_louv = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/louvain\")\n",
    "total_louv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11231"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_spgl, total_spgl = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/spinglass\")\n",
    "total_spgl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11281"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_le, total_le = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/training_results/leading eigenv\")\n",
    "total_le"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAacAAAEYCAYAAAD4czk4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAHldJREFUeJzt3XuYFdW95vHvK40SLyhoYyJtxACi\nIIjC8XIkxEQHURIvEy9gEjF6wmNEY+JEYxwnJpIcNXFi4lGJjpegJwe8oaBRkaDExxuCckcRoh5F\nEFtBjRpRzG/+qNW4aXZD003Tq+n38zz72VWrVlWtvbqq3qraxUYRgZmZWU62au4GmJmZ1eZwMjOz\n7DiczMwsOw4nMzPLjsPJzMyy43AyM7PsOJzMzCw7DiczM8uOw8nMzLJT0dwNaKhddtklunTp0tzN\nMDOzenr22WffiojK+tRtseHUpUsXZsyY0dzNMDOzepL03/Wt69t6ZmZN7PTTT6dTp07su+++a8ru\nvPNOevXqxVZbbbXWifbkyZPp168fvXv3pl+/fjzyyCNrpo0dO5bevXvTp08fBg8ezFtvvbXeZbVk\nDicz22QHz8GDB7PffvvRq1cvzjzzTD799NP1Lqu1OO2003jooYfWKtt3330ZP348AwcOXKt8l112\n4b777mPu3LmMGTOG73znOwCsXr2ac889l0cffZQ5c+bQp08frrnmmvUuqyVzOFmLsDEHz7fffpuv\nfvWrbL/99px99tlrLef222+nT58+9OrViwsuuGBN+R/+8Ad69+5N3759GTBgAAsWLGj6D5WRTXHw\nBLjjjjuYPXs28+bNo7q6mjvvvHO9y2otBg4cSMeOHdcq22effejRo8c6dffff3922203AHr16sVH\nH33EqlWriAgigg8++ICI4L333ltTr65ltWQOJ2sRNubg2a5dO0aNGsWVV165Vvnbb7/N+eefz5Qp\nU5g/fz7Lly9nypQpAJxyyinMnTuXWbNmccEFF3Deeec17QfKzKY4eAK0b98eKM7yP/74YyStd1m2\nfnfffTf7778/22yzDW3btmX06NH07t2b3XbbjQULFnDGGWc0dxObjMNpE9qYs3uAyy67jG7dutGj\nRw8mTZoEwMKFC+nbt++aV/v27fnd7363wWVt6Tbm4LnddtsxYMAA2rVrt1b5Sy+9xF577UVlZfGw\n0BFHHMHdd98NfHZQBfjggw/WHFRt/UoPnjWOPPJIOnXqxA477MAJJ5zQjK1r2ebPn89PfvITrr/+\negA++eQTRo8ezcyZM1m6dCl9+vThsssua+ZWNh2H0ya0MWf3CxYsYNy4ccyfP5+HHnqIs846i08/\n/ZQePXowa9YsZs2axbPPPsu2227L8ccfv95lWf1069aNF154gVdeeYXVq1dz77338tprr62Zfu21\n19K1a1cuuOACrr766mZsactQ++BZY9KkSSxbtoxVq1at9X2U1d+SJUs4/vjjufXWW+natSsAs2bN\nAqBr165I4qSTTuLJJ59szmY2KYfTJrQxZ/cTJkxg6NChbLPNNuy5555069aNZ555Zq06U6ZMoWvX\nruyxxx7rXZbVT4cOHRg9ejQnn3wyX/7yl+nSpQsVFZ/9a4qRI0fyt7/9jSuuuIJf/vKXzdjS/JU7\neJZq164dxxxzDBMmTGiG1rVs77zzDkOGDOGyyy7j0EMPXVPeuXNnFixYQHV1NVA8mLLPPvs0VzOb\nnMOpmbz++uvsvvvua8arqqp4/fXX16ozbtw4hg0btrmbtkX7xje+wbRp03jqqafo0aMH3bt3X6fO\n0KFDuffee5uhdS1DXQfP999/n2XLlgHFd04PPPAAe++9d3M1MyvDhg3jkEMOYeHChVRVVXHTTTdx\nzz33UFVVxVNPPcWQIUM48sgjAbjmmmtYvHgxo0aNWnN7/80332S33XbjkksuYeDAgfTp04dZs2Zx\n0UUXAdS5rBat5gmQlvbq169f5Ojll1+OXr16rVP+la98JaZPn75m/Kyzzorbbrttzfjpp58ed911\n15rxVatWxc477xxvvPHGBpfVWtS3b2vccsstMXLkyLXKli9fHhERK1asiP322y8WLlwYEREvvvji\nmjoTJ06MXLevpjJ06ND4/Oc/HxUVFdG5c+e48cYbY/z48dG5c+fYeuuto1OnTjFo0KCIiBg1alRs\nu+22sd9++615LV++PN54443o379/9O7dO3r27Blnn312fPLJJxERdS7LWhdgRtTzGN9ifyGipauq\nqlrr+44lS5aseQIK4MEHH+SAAw5g1113bY7mZWfYsGFMnTqVt956i6qqKn7xi1/QsWNHzjnnHKqr\nqxkyZAh9+/Zd82BJly5deO+99/j444+59957efjhh+nZsyfnnnsus2fPBuBnP/sZe+21F1Ccrf7l\nL3+hbdu2dOjQgTFjxjTbZ20OY8eOLVte831nqYsvvpiLL764bP3p06fXuZxyyzKri8OpmRxzzDGc\ncsopnHfeeSxdupRFixZx4IEHrpk+duxY39IrsTEHT4BXXnllo5bz+9//vkHtsi1Tlwv/3NxNyNIr\nlw/ZbOtyOG1CG3N236tXL0466SR69uxJRUUF1157LW3atAHgww8/ZPLkyes8BXXPPffUeaWQG+/c\n5W2qndv9W97mPHha01JxG7Dl6d+/f7S2f+vTkvjgWZ7DqWm5f5tWY/tX0rMR0b8+df20npmZZafV\n3tbzmVF5vi1iZjnwlZOZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm2XE4mZlZdhxOZmaW\nHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm\n2dlgOEm6WdKbkuaVlHWUNFnSovTeIZVL0tWSFkuaI+mAknmGp/qLJA0vKe8naW6a52pJ2tQf0szM\nWpb6XDn9ERhcq+xCYEpEdAempHGAo4Du6TUCGA1FmAGXAAcBBwKX1ARaqjOiZL7a6zIzs1Zmg+EU\nEY8BK2oVHwuMScNjgONKym+NwtPATpK+ABwJTI6IFRGxEpgMDE7T2kfEUxERwK0lyzIzs1aqod85\n7RoRywDSe6dU3hl4raTeklS2vvIlZcrLkjRC0gxJM6qrqxvYdDMzy92mfiCi3PdF0YDysiLihojo\nHxH9KysrG9hEMzPLXUPDaXm6JUd6fzOVLwF2L6lXBSzdQHlVmXIzM2vFGhpOE4GaJ+6GAxNKyk9N\nT+0dDLybbvtNAgZJ6pAehBgETErT/i7p4PSU3qklyzIzs1aqYkMVJI0FDgN2kbSE4qm7y4E7JJ0B\nvAqcmKo/ABwNLAY+BL4LEBErJI0Cpqd6l0ZEzUMW36d4IvBzwIPpZWZmrdgGwykihtUx6fAydQMY\nWcdybgZuLlM+A9h3Q+0wM7PWw78QYWZm2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5m\nZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm2XE4mZlZdhxOZmaWHYeTmZllx+Fk\nZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm2XE4mZlZdhxO\nZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlpVDhJ+pGk+ZLmSRorqZ2kPSVN\nk7RI0u2Stk51t0nji9P0LiXL+WkqXyjpyMZ9JDMza+kaHE6SOgM/APpHxL5AG2AocAVwVUR0B1YC\nZ6RZzgBWRkQ34KpUD0k903y9gMHAdZLaNLRdZmbW8jX2tl4F8DlJFcC2wDLga8BdafoY4Lg0fGwa\nJ00/XJJS+biIWBURLwOLgQMb2S4zM2vBGhxOEfE6cCXwKkUovQs8C7wTEatTtSVA5zTcGXgtzbs6\n1d+5tLzMPGuRNELSDEkzqqurG9p0MzPLXGNu63WguOrZE9gN2A44qkzVqJmljml1la9bGHFDRPSP\niP6VlZUb32gzM2sRGnNb7wjg5YiojohPgPHAvwI7pdt8AFXA0jS8BNgdIE3fEVhRWl5mHjMza4Ua\nE06vAgdL2jZ9d3Q4sAB4FDgh1RkOTEjDE9M4afojERGpfGh6mm9PoDvwTCPaZWZmLVzFhquUFxHT\nJN0FPAesBmYCNwB/BsZJ+mUquynNchNwm6TFFFdMQ9Ny5ku6gyLYVgMjI+LThrbLzMxavgaHE0BE\nXAJcUqv4Jco8bRcRHwEn1rGcXwG/akxbzMxsy+FfiDAzs+w4nMzMLDsOJzMzy47DyczMsuNwMjOz\n7DiczMwsOw4nMzPLjsPJzMyy43AyM7PsOJzMzCw7DiczM8uOw8nMzLLjcDIzs+w4nMzMLDsOJzMz\ny47DyczMsuNwMjOz7DiczMwsOw4nMzPLjsPJzMyy43AyM7PsOJzMzCw7DiczM8uOw8nMzLLjcDIz\ns+w4nMzMLDsOJzMzy47DyczMsuNwMjOz7DiczMwsOw4nMzPLjsPJzMyy06hwkrSTpLskvSDpeUmH\nSOooabKkRem9Q6orSVdLWixpjqQDSpYzPNVfJGl4Yz+UmZm1bI29cvo98FBE7A3sBzwPXAhMiYju\nwJQ0DnAU0D29RgCjASR1BC4BDgIOBC6pCTQzM2udGhxOktoDA4GbACLi44h4BzgWGJOqjQGOS8PH\nArdG4WlgJ0lfAI4EJkfEiohYCUwGBje0XWZm1vI15srpS0A1cIukmZJulLQdsGtELANI751S/c7A\nayXzL0lldZWvQ9IISTMkzaiurm5E083MLGeNCacK4ABgdETsD3zAZ7fwylGZslhP+bqFETdERP+I\n6F9ZWbmx7TUzsxaiMeG0BFgSEdPS+F0UYbU83a4jvb9ZUn/3kvmrgKXrKTczs1aqweEUEW8Ar0nq\nkYoOBxYAE4GaJ+6GAxPS8ETg1PTU3sHAu+m23yRgkKQO6UGIQanMzMxaqYpGzn8O8CdJWwMvAd+l\nCLw7JJ0BvAqcmOo+ABwNLAY+THWJiBWSRgHTU71LI2JFI9tlZmYtWKPCKSJmAf3LTDq8TN0ARtax\nnJuBmxvTFjMz23L4FyLMzCw7DiczM8uOw8nMzLLjcDIzs+w4nMzMLDsOJzMzy47DyczMsuNwMjOz\n7DiczMwsOw4nMzPLjsPJzMyy43AyM7PsOJzMzCw7DiczM8uOw8nMzLLjcDIzs+w4nMzMLDsOJzMz\ny47DyczMsuNwMjOz7DiczMwsOw4nMzPLjsPJzMyy43AyM7PsOJzMzCw7DiczM8uOw8nMzLLjcDIz\ns+w4nMzMLDsOJzMzy47DyczMsuNwMjOz7DiczMwsO40OJ0ltJM2UdH8a31PSNEmLJN0uaetUvk0a\nX5ymdylZxk9T+UJJRza2TWZm1rJtiiunc4HnS8avAK6KiO7ASuCMVH4GsDIiugFXpXpI6gkMBXoB\ng4HrJLXZBO0yM7MWqlHhJKkKGALcmMYFfA24K1UZAxyXho9N46Tph6f6xwLjImJVRLwMLAYObEy7\nzMysZWvsldPvgAuAf6bxnYF3ImJ1Gl8CdE7DnYHXANL0d1P9NeVl5lmLpBGSZkiaUV1d3cimm5lZ\nrhocTpK+DrwZEc+WFpepGhuYtr551i6MuCEi+kdE/8rKyo1qr5mZtRwVjZj3UOAYSUcD7YD2FFdS\nO0mqSFdHVcDSVH8JsDuwRFIFsCOwoqS8Ruk8ZmbWCjX4yikifhoRVRHRheKBhkci4lvAo8AJqdpw\nYEIanpjGSdMfiYhI5UPT03x7At2BZxraLjMza/kac+VUl58A4yT9EpgJ3JTKbwJuk7SY4oppKEBE\nzJd0B7AAWA2MjIhPm6BdZmbWQmyScIqIqcDUNPwSZZ62i4iPgBPrmP9XwK82RVvMzKzl8y9EmJlZ\ndhxOZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZ\nZcfhZGZm2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZ\nWXYcTmZmlh2Hk5mZZcfhZGZm2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZ\nmWXH4WRmZtlpcDhJ2l3So5KelzRf0rmpvKOkyZIWpfcOqVySrpa0WNIcSQeULGt4qr9I0vDGfywz\nM2vJGnPltBr4XxGxD3AwMFJST+BCYEpEdAempHGAo4Du6TUCGA1FmAGXAAcBBwKX1ASamZm1Tg0O\np4hYFhHPpeG/A88DnYFjgTGp2hjguDR8LHBrFJ4GdpL0BeBIYHJErIiIlcBkYHBD22VmZi3fJvnO\nSVIXYH9gGrBrRCyDIsCATqlaZ+C1ktmWpLK6ysutZ4SkGZJmVFdXb4qmm5lZhhodTpK2B+4GfhgR\n762vapmyWE/5uoURN0RE/4joX1lZufGNNTOzFqFR4SSpLUUw/Skixqfi5el2Hen9zVS+BNi9ZPYq\nYOl6ys3MrJVqzNN6Am4Cno+I35ZMmgjUPHE3HJhQUn5qemrvYODddNtvEjBIUof0IMSgVGZmZq1U\nRSPmPRT4DjBX0qxUdhFwOXCHpDOAV4ET07QHgKOBxcCHwHcBImKFpFHA9FTv0ohY0Yh2mZlZC9fg\ncIqIxyn/fRHA4WXqBzCyjmXdDNzc0LaYmdmWxb8QYWZm2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZ\ncTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm2XE4mZlZdhxOZmaW\nHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtlxOJmZWXYcTmZmlh2Hk5mZZcfhZGZm\n2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZcTiZmVl2HE5mZpYdh5OZmWXH4WRmZtnJJpwkDZa0UNJi\nSRc2d3vMzKz5ZBFOktoA1wJHAT2BYZJ6Nm+rzMysuWQRTsCBwOKIeCkiPgbGAcc2c5vMzKyZKCKa\nuw1IOgEYHBH/lsa/AxwUEWfXqjcCGJFGewALN2tDm84uwFvN3YgtmPu3abl/m9aW1L97RERlfSpW\nNHVL6kllytZJzYi4Abih6ZuzeUmaERH9m7sdWyr3b9Ny/zat1tq/udzWWwLsXjJeBSxtpraYmVkz\nyyWcpgPdJe0paWtgKDCxmdtkZmbNJIvbehGxWtLZwCSgDXBzRMxv5mZtTlvcrcrMuH+blvu3abXK\n/s3igQgzM7NSudzWMzMzW8PhZGZm2XE41UHSDyQ9L+lPGznfTpLOaqp2bUQ7pkpq8Y+fSnp/M67r\nxtb+yySSzpR06iZaVrNsg5tqm5F0mqRr0vAm65f1rO9SSUc05ToaStJhkv51c64ziwciMnUWcFRE\nvLyR8+2U5r2uoSuWVBERqxs6vzVMzT8Cb80i4g/N3YYcbY5+iYifNfU6GuEw4H3gyfrO0NjjmK+c\nypD0B+BLwERJP5J0oKQnJc1M7z1SvV6SnpE0S9IcSd2By4Guqew3ZZb9fyS9IGmypLGSfpzKp0r6\nd0l/Bc6VVCnpbknT0+vQVG87STenspmSjk3ln5M0LrXjduBzqfwMSVeVrP97kn7btD246anwG0nz\nJM2VdHIqP0zS/SX1rklnvEdJuqOk/DBJ96Xh0ZJmSJov6Rclddac6Ut6X9KvJM2W9LSkXTffp910\n0vby5/Q55pX02yuSrkjb7zOSuqXyn9faJmvqvCjpy2WWv5Wk61Jf3i/pgfSLL7Xr1dXnl0takLbb\nK1PZiamtsyU91sjPf37aV+bUWu+9kp5N7RlRUv7d9Fn/ChxaUr7BfpG0raQ7avZBSdNU5spRUj9J\nf03rnyTpC6n8jzV9J+nodJx4XNLVNdv4evb/0ySNl/SQpEWSfp3Kv18zXFLvP9Lwt/XZ8et6Fb9x\nWvMj3M+l/p8iqQtwJvCjVPfLkvZI0+ak9y+WfIbfSnoUuELSV9I8s1J7d6j3Hy8i/CrzAl4BdknD\n7YGKNHwEcHca/g/gW2l4a4pA6ALMq2OZ/YFZqd4OwCLgx2naVOC6krr/BQxIw18Enk/D/w58Ow3v\nBLwIbAecR/EIPkAfYHVa33bA34C2adqTQO/m7t+N+Du8n96/CUym+KcGuwKvAl+gOKO7v6T+NcBp\nFHcFXgW2S+WjS/qtY3pvk/q9T8nfoH8aDuAbafjXwMXN3RcN7L9vAv+vZHzHku37f6fhU2v6EPh5\nrW3y/6bho4G/lFn+CcADFCe6nwdWAieU6c91+hzoSPETZDVPDe+U3ucCnUvLGrjNDKJ4DFupffcD\nA2u153PAPGDntD29ClRS7M9PANfUt1+AHwPXp+F9Sftgrba1pdgHK9P4yXy23/4x9Wc74DVgz1Q+\ntuTvU9f+fxrwErBjmv+/KX7YoJLid0tr1v8gMADYB7iPz44L16XtoLLWujvW/vxp/D5geBo+Hbi3\n5DPcD7QpqXdoGt6edBytz8tXTvWzI3CnpHnAVUCvVP4UcJGkn1D8ZtQ/NrCcAcCEiPhHRPyd4g9X\n6vaS4SOAayTNovgHye3TWccg4MJUPpViQ/wiMBD4T4CImAPMScMfAI8AX5e0N8XGOHdjOyADA4Cx\nEfFpRCwH/gr8S12Vo7id8BDwDUkVwBBgQpp8kqTngJkUf8ty3zN9TLGTATxLcdLREs0Fjkhn+l+O\niHdLpo0teT+kjvnHp/e6+mAAcGdE/DMi3gAerWM55fr8PeAj4EZJ/xP4MNV9AvijpO9RhFlDDUqv\nmcBzwN5A9zTtB5JmA09THMS7AwcBUyOiOoofoL593UWuUa5fBlD8aDURMY+0D9bSgyK4Jqd9+GKK\nX8QptTfwUnz2lcLYkml17f8AUyLi3Yj4CFhAcUyqBl6SdLCkndP6nwAOB/oB09OyDqe4W3Qw8FjN\nuiNiRR2f/xCKE2iA29Jnr3FnRHyahp8AfivpBxQnGvW+zefvnOpnFPBoRByfLnGnAkTEf0maRnHg\nmyTp3yjOXupS7jcES31QMrwVcEjtwJMk4JsRsbBWOZT5PcLkRuAi4AXglg20IVd19d1q1r493a5k\n+HZgJLACmB4Rf5e0J8UZ7r9ExEpJf6w1T41PIp3uAZ/SQveViHhRUj+KM/zLJD0cEZfWTC6tWsci\nVqX3uvpgQ9s0dfV5FP/4/kCKA+NQ4GzgaxFxpqSDKParWZL6RsTbG1pPHW27LCKur9WewyhO/g6J\niA8lTeWzbaC+//CzXL9ssC9SnfkRUdfJwIaWU9f+f1BJm2q363bgJIr9/56IiHQcGRMRP621nGOo\nfx+UKp1nzXEsIi6X9GeK7e9pSUdExAv1WaCvnOpnR+D1NHxaTaGkL1Gc4VxNcXXTB/g7xS27ch6n\nOJNvJ2l7ip2vLg9T7Kw16+qbBicB56SNC0n7p/LHgG+lsn1TWwCIiGkUZ4ensPZZWEvyGHCypDaS\nKimuFJ+huH3RU9I2knakONDVmAocAHyPz86C21PsPO+q+B7pqM3U/mYhaTfgw4j4T+BKiv6ocXLJ\n+1MNXMXjwDdVfPe0K8Vt1trK9nnaB3aMiAeAHwJ9U3nXiJgWxQMCb7H2725ujEnA6Wk9SOosqRPF\n/rwyBdPeFFcLANOAwyTtLKktcOJGru9xihBAxVOfvcvUWQhUSjok1WsrqVetOi8AX0onwvDZ36nm\nM5Xb/9dnPHAcMIzP9oMpwAmpP5DUUdIeFNvBV9IJBZI6pvq1j2tPUpxQQHHcebzcitPfcm5EXAHM\noLgqrJcWeTbYDH4NjJF0HsUtshonA9+W9AnwBnBpRKyQ9ES6BfhgRJxfUzkipkuaCMymOKjOAEpv\ns5T6AXCtpDkUf6fHKL6UHAX8DpiTNtBXgK9TfKdyS6o/i+LAXeoOoG9ErGxoJzSzeyhuJcymOEu7\nIN1GQsWDD3MovsObWTNDRHyq4ovk04DhqWy2pJnAfIqr3Cc242doDr2B30j6J/AJ8P2SadukK/+t\nKA5cDXE3xQnBPIrvP6ZRa5teT5/vAEyQ1I7iiuBHqfw3Kh4uEsVBdHZDGhYRD0vaB3gqHcvfB75N\ncbv3zLSvLKS4tUdELJP0c4oD9DKKW4Ebc1vxOorjxByK7XAO6/bFxyoeerg6nUxVUOzP80vq/EPF\nP0d5SNJbrL0v17X/r68fVkpaAPSMiGdS2QJJFwMPS9qKYtsYGRFPq3hAZHwqfxP4HxRfQdyl4gGM\ncyiOTzdLOh+oBr5bx+p/KOmrFFdyCyi+86oX/3zRZiZp+4h4X9K2FIEzIiKe2wzrvR+4KiKmNPW6\nLH+SXqH4sr7R/09QyTa9M8WB9NCaE4fWRMXTbm0j4iNJXSmCda/0/dXGLqumT0Xxv4QvioirNjTf\nlsRXTpvfDemSvx3FPd8mDSZJO1EcMGY7mKyJ3J+2s62BUa0xmJJtgUfTLUEB329IMCXfkzScok9n\nAtdvoP4Wx1dOZmaWHT8QYWZm2XE4mZlZdhxOZmaWHYeTmZllx+FkZmbZ+f+zOLClraCL6gAAAABJ\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5539b31cc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':total_fgr, u'louvain': total_louv, u'spin glass':total_spgl, u'leading eigenvectors':total_le}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height + 20, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Brief analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "metadata": {},
   "outputs": [],
   "source": [
    "mb = min(comp_fgr, key = lambda t: t[1])\n",
    "ml = min(comp_louv, key = lambda t: t[1])\n",
    "msp = min(comp_spgl, key = lambda t: t[1])\n",
    "mle = min(comp_le, key = lambda t: t[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('2738', 42) ('11364', 45) ('11364', 43) ('11364', 41)\n"
     ]
    }
   ],
   "source": [
    "print(mb, ml, msp, mle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAacAAAEYCAYAAAD4czk4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAFtxJREFUeJzt3X20VXWdx/HPR/ApTUm9KiOjl5JR\nDPAyEsqgxqi11CydkcIGCxBlmSVp04Nl40qbCdFG0sjUIZWlhViaIlaoKLpERVAeVQxzyLkj6XW0\nlCID+s4f+3flcLnX+3TuPT/ueb/WYp199vnts7/3d/bZn/10No4IAQCQkx0qXQAAAE0RTgCA7BBO\nAIDsEE4AgOwQTgCA7BBOAIDsEE4AgOwQTgCA7BBOAIDs9O7Ome2zzz5RW1vbnbMEAGTiqaeeei0i\natrStlvDqba2VkuWLOnOWQIAMmH7t21ty2E9bBc2b96soUOH6pRTTpEkjR8/Xv3791ddXZ3q6uq0\nbNmyClcIoJy6dc8J6Kirr75aAwcO1JtvvvnOuCuvvFKjR4+uYFUAugp7TshefX297r33Xp199tmV\nLgVANyGckL0LLrhAV1xxhXbYYevF9eKLL9aQIUN04YUX6u23365QdQC6AuGErM2dO1f77ruvjjji\niK3GT5kyRatXr9bixYv1+uuva+rUqRWqEEBXIJyQtYULF2rOnDmqra3VGWecoQcffFBnnnmm+vbt\nK9vaeeedNWHCBD355JOVLhVAGRFOyNqUKVNUX1+vtWvX6rbbbtNxxx2nW2+9VevWrZMkRYTuuusu\nDRo0qMKVAignrtbDdmns2LFqaGhQRKiurk7XXXddpUsCUEaOiG6b2bBhw4If4QJAdbL9VEQMa0tb\nDusBALLDYT20qvaieytdQvbWXv6xSpcA9CjsOQHYRtPbRU2cOFGHH364hgwZotGjR2v9+vUVrhA9\nHeEEYBuNt4tqNG3aNC1fvlwrVqzQgQceqOnTp1ewOlQDwgnAVpq7XdQee+whqbh0f8OGDbJdqfJQ\nJQgnAFtp6XZREyZM0P7776/Vq1fr/PPPr1B1qBaEE4B3tHS7KEm66aab9PLLL2vgwIGaPXt2BapD\nNSGcOqDpyeKxY8fqkEMO0aBBg3TWWWdp48aNFa4Q6JiWbhfVqFevXhozZozuuOOOClaJakA4dUDT\nk8Vjx47V6tWrtXLlSm3YsEEzZsyoYHVAxzV3u6hbbrlFL7zwgqTinNM999yjQw89tMKVoqcjnNqp\nuZPFJ598smzLtoYPH676+voKVgiUV0Ro3LhxGjx4sAYPHqx169bpkksuqXRZ6OH4EW47NZ4sfuut\nt7Z5bePGjbrlllt09dVXV6AyoLxGjRqlUaNGSSoO9wHdiXBqh9KTxQsWLNjm9fPOO0/HHnusjjnm\nmO4vDj0Gd+RoG+7K0bNxWK8d3u1k8aWXXqqGhgZdddVVFa4SwPam6UVW06dP18EHHyzbeu211ypc\nXWUQTu3Q0v8tNGPGDM2bN0+zZs3a5rchANCaphdZjRw5Ug888IAOOuigClZVWaxJy+Dcc8/VK6+8\nohEjRqiurk6XXXZZpUsCsJ1o7iKroUOHqra2tnJFZYBzTh1UerJ406ZNlS0GwHbr3S6yqmbbXThx\nsrhtOFkM5K+1i6yqGYf1AKBCWrsjRzUjnACgQlq6yAqEEwBk55prrlG/fv1UX1+vIUOGbHWxRLXY\n7s45AUBPVHqR1eTJkzV58uTKFlRhhBOAqsZFVm3T3RdZcVgPAJCdNoeT7V62l9qem573t73I9hrb\ns23v1HVlAgCqSXv2nL4o6bmS51MlTYuIAZLekDSxnIUBAKpXm8LJdj9JH5M0Iz23pOMk/Sw1mSnp\ntK4oEABQfdq65/Q9SV+V9Nf0fG9Jv4+Ixvv21Es6oMy1AQCqVKvhZPsUSa9GxFOlo5tpGi1MP8n2\nEttLGhoaOlgmAKCatGXPaaSkT9heK+k2FYfzviepj+3GS9H7SXq5uYkj4oaIGBYRw2pqaspQMgCg\np2s1nCLi6xHRLyJqJZ0h6cGIGCvpIUmjU7Nxku7usioBAFWlM79z+pqkL9l+QcU5qB+VpyQAQLVr\n1x0iImKBpAVp+EVJw8tfEgCg2nGHCABAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggn\nAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBA\ndggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYI\nJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcAQHYIJwBAdggnAEB2CCcA\n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\n29dJer+kObYvtD3c9mO2l6bHQ1K7D9p+0vYy2ytsD5B0uaQPpHFXNvPe/2Z7te37bc+y/eU0foHt\n79h+WNIXbdfYvsP24vRvZGq3m+0b07iltk9N43e1fVuqY7akXdP4ibanlcz/HNtXdW0Pdj0XrrS9\nyvZK22PS+FG255a0m562ZE+yfXvJ+FG270nDP7S9xPYzti8tafPOVr3t9bb/w/Zy20/Y3q/7/tqu\nlZape9PftqqkL9fanpqW8SdtH5zGf6vJctvY5te2j2nm/XewfW3q37m2f5HuENO0XUufw+W2n03L\n9nfTuE+mWpfbfqQL+uQr6Tu2okktd9l+KtU4qWT8hPT3PyxpZMn4VvvK9nts39743bW9yM3sTdo+\nwvbDaf7zbPdN429u7E/bJ6f1y6O2r2n8LrzLemO87Ttt/8r2GttXpPGfaxwuaff9NHymt6z3rndx\nn9TGG3k/nT6T+bZrJZ0r6cLU9hjbB6XXVqTHA0v+hqtsPyRpqu0Pp2mWpXrf2+4PMSJ65D9JayXt\nk4b3kNQ7DZ8g6Y40/H1JY9PwTioCoVbSqhbec5ikZandeyWtkfTl9NoCSdeWtP2JpKPT8IGSnkvD\n35F0ZhruI+nXknaT9CUVl+NL0hBJm9L8dpP0G0k7ptcekzS40v3bic9lfXo8XdL9Kn6GsJ+klyT1\nVbGlNrek/XRJ41Xs5b8kabc0/ocl/bhXeuyVPochJZ/JsDQckj6ehq+Q9M1K90UZ+/R0Sf9V8nzP\nku/AxWn4s439KulbTZbb/0zDJ0t6oJn3Hy3pFyo2ZveX9Iak0c308Tafg6S9VNyyrPHK4D7pcaWk\nA0rHlXHZ+qiKS7Gdap4r6dgmNe4qaZWkvdNy95KkGhXrgYWSpre1ryR9WdL1aXiQ0ne3SW07qvju\n1qTnY7Tl+35z6uNdJP2PpP5p/KySz6yl9cZ4SS9K2jNN/1sVN0eoUXHv08b5/1LS0ZIGSrpHW9Yn\n16Zlo6bJvPdq+ven5/dIGpeGz5J0V8nfMFdSr5J2I9Pw7krr3/b865F7Ts3YU9JPba+SNE3SB9P4\nxyV9w/bXVNzzaUMr73O0pLsjYkNEvKXiAyg1u2T4BEnTbS9T8ePkPdLWw0clXZTGL1CxQB0o6VhJ\nt0pSRKyQtCIN/1HSg5JOsX2oioVqZXs7IENHS5oVEZsj4hVJD0v6UEuNozhM8CtJH7fdW9LHJN2d\nXv6U7aclLVXx2TZ3nukvKr48kvSUio2QnmKlpBPSVv0xEfGHktdmlTyOaGH6O9NjS/1ytKSfRsRf\nI+J3kh5q4X2a+xzelPRnSTNs/7OkP6W2CyXdbPscFWFWTh9N/5ZKelrSoZIGpNcm214u6QkVK/EB\nko6UtCAiGqK4ifXsbd/yHc311dEqbnytiFil9N1t4hAVwXV/+u5/U8VddUodKunF2HIqYlbJay2t\nNyRpfkT8ISL+LOlZFeuyBkkv2j7K9t5p/gslHS/pCEmL03sdr+Io01GSHmmcd0S83sLfP0LFhrck\n3ZL+9kY/jYjNaXihpKtsT1ax8dHuw3w9+ZxTqW9Leigi/intqi6QpIj4ie1FKlZ082yfrWIrpCXN\n3U+w1B9LhneQNKJp4Nm2pNMj4vkm46Vm7k2YzJD0DUmrJd3USg3bi5b6cpO2Pty8S8nwbEmfl/S6\npMUR8Zbt/iq2XD8UEW/YvrnJNI02RtqMk7RZPWjZj4hf2z5Cxdb8FNv3RcRljS+XNm3hLd5Ojy31\nS2vLvVr6HKL4sf5wFSvBMyR9QdJxEXGu7SNVfPeW2a6LiP9rbT5tZElTIuL6JjWOUrHROCIi/mR7\ngbYsK239wWdzfdVq/6Q2z0RESxsIrb1PS+uNI0tqalrXbEmfUrHe+HlERFr/zIyIrzd5n0+o7X1Q\nqnSad9Z/EXG57XtVLJNP2D4hIla3542rac/pf9Pw+MaRtt+vYkvlGhV7N0MkvaXikF1zHlWx5b6L\n7d1VfLFacp+KL2LjvOrS4DxJ56eFRLaHpvGPSBqbxg1KtUiSImKRiq28f9HWW1Pbs0ckjbHdy3aN\nij3HJ1UcljjM9s6291SxUmu0QNLfSzpHW7Zu91DxpfiDi/NIJ3VT/dmw/TeS/hQRt0r6roo+ajSm\n5PHxDs7iUUmnuzj3tJ+KQ69NNfs5pO/JnhHxC0kXSKpL4z8QEYuiuBjgNW19n87OmifprDRv2T7A\n9r4q1gNvpGA6VMXegiQtkjTK9t62d5T0yXbO71EVISAXV4cObqbN85JqbI9I7Xa0/cEmbVZLen/a\ngJa2fHaNf1Nz6413c6ek0yR9Wlu+L/MljU79Idt72T5IxbLx4bSRIdt7pfZN14ePqdjIkIr11aPN\nzTh9visjYqqkJSr2Ctulx2w9tuIKSTNtf0nFIbJGYySdaXujpN9JuiwiXre9MB0C/GVEfKWxcUQs\ntj1H0nIVK9ElkkoPoZSaLOkHtleo6OdHVJxc/Lak70lakRa0tZJOUXEO5abUfpmKFXWp2yXVRcQb\nHe2EzPxcxSGC5Sq2vr6aDhnJxYUPK1Sc01vaOEFEbHZxgni8pHFp3HLbSyU9o2Kvd2E3/g25GCzp\nStt/lbRR0udKXts5HR3YQcVKqiPuULGRsErFuY5FarLcv8vn8F5Jd9veRcXW/4Vp/JUuLkCyihXm\n8g7Wto2IuM/2QEmPp3X5eklnqjgsfG76jj2v4tCeImKd7W+pWEGvU3EosD2HGq9VsX5ZoWJ5XaFt\n++cvLi56uCZtdPVWsR54pqTNBhc/Y/mV7de09TqgpfXGu/XDG7aflXRYRDyZxj1r+5uS7rO9g4rl\n5fMR8YSLC0TuTONflfQRFacufubiAozzVazXbrT9FUkNkia0MPsLbP+jij25Z1Wc82oXbl/UTrZ3\nj4j1tt+jInAmRcTT3TDfuZKmRcT8rp4Xegbba1WcmO/0/wtUstzvrWKlObJxY6LaubjabceI+LPt\nD6gI279L56/a+16N/WwV/9P4moiY1tp0PVG17DmV0w1p130XFcduuzSYbPdRsTJYTjChguamZXEn\nSd8mmLbyHkkPpUOClvS5jgRTco7tcSr6eamk61tp32Ox5wQAyE61XBABANiOEE4AgOwQTgCA7BBO\nAIDsEE4AgOz8P9Rt/Dh1g7j3AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5536898d30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':mb[1], u'louvain': ml[1], u'spin glass':msp[1], u'leading eigenvectors':mle[1]}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "maxb = max(comp_fgr, key = lambda t: t[1])\n",
    "mal = max(comp_louv, key = lambda t: t[1])\n",
    "masp = max(comp_spgl, key = lambda t: t[1])\n",
    "male = max(comp_le, key = lambda t: t[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEYCAYAAAAJeGK1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAG+RJREFUeJzt3X2cXVV97/HPD8JDEEl4CFySQIMa\n5FEDTCEUWrkiQR5akIQGlAoUzQtrfQC1ob29tyK9FdRrFBFrBAQuNgkICCJFQiCi0AABQgggkgsK\nAZQAMaIRNfi7f+w1yclkJgkzycyayef9es3r7LP22mevs2af/d177T1nIjORJKk2m/R1AyRJ6owB\nJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSarSoL5uwJrssMMOOWrUqL5uhiRp\nPbr//vtfzMxha6tXdUCNGjWKuXPn9nUzJEnrUUT8bF3qrXWILyIui4gXImJBS9l2ETEzIp4oj9uW\n8oiICyNiYUTMj4j9W5Y5tdR/IiJO7c6b6g++/OUvs88++7D33nvzpS99CYCJEycyZswYxowZw6hR\noxgzZgwAM2fO5IADDmDfffflgAMO4Pbbb+/LpktSVdblDOpy4CLgypayc4BZmXl+RJxTnk8GjgJG\nl5+DgK8BB0XEdsC/AG1AAvdHxI2ZuWR9vZEaLFiwgG984xvce++9bL755rz73e/mmGOOYcaMGSvq\nfOITn2DIkCEA7LDDDnz3u99l+PDhLFiwgCOPPJJnn322r5ovSVVZ6xlUZt4JvNyh+DjgijJ9BXB8\nS/mV2ZgDDI2InYEjgZmZ+XIJpZnAu9fHG6jJY489xtixY9lqq60YNGgQ73jHO7j++utXzM9Mrr76\nak4++WQA9ttvP4YPHw7A3nvvzauvvsrvfve7Pmm7JNWmu3fx7ZSZzwOUxx1L+QjgmZZ6i0pZV+Wr\niYhJETE3IuYuXry4m83rG/vssw933nknL730EsuWLePmm2/mmWdWvu0f/vCH7LTTTowePXq1Za+9\n9lr2228/tthii95ssiRVa33fJBGdlOUaylcvzJwKTAVoa2vrV/+sas8992Ty5MkcccQRbL311rz9\n7W9n0KCVXTxt2rQVZ0+tHnnkESZPnsytt97am82VpKp19wzqF2XojvL4QilfBOzSUm8k8Nwaygec\nM844gwceeIA777yT7bbbbsXZ0vLly7nuuuuYOHHiKvUXLVrEe97zHq688kre/OY390WTJalK3Q2o\nG4H2O/FOBW5oKX9/uZtvLLC0DAF+HxgXEduWO/7GlbIB54UXmqx++umnue6661acMd12223sscce\njBw5ckXdX/7ylxxzzDF89rOf5ZBDDumT9kpSrdY6xBcR04DDgB0iYhHN3XjnA1dHxBnA08CJpfrN\nwNHAQmAZcDpAZr4cEecB95V6n8nMjjdeDAjjx4/npZdeYrPNNuOrX/0q2267LQDTp09fbXjvoosu\nYuHChZx33nmcd955ANx6663suOOOq72uJG1sIrPeyzxtbW3pH+pK0sASEfdnZtva6vldfJKkKlX9\nVUfrw6hzvtfXTajaT88/pq+bIEmd8gxKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQl\nA0qSVCUDSpJUJQNKklQlA0r90pQpU9h7773ZZ599OPnkk3n11VeZNWsW+++/P2PGjOHQQw9l4cKF\nAJx11lmMGTOGMWPGsPvuuzN06NA+bn3/YT+rLxlQ6neeffZZLrzwQubOncuCBQt47bXXmD59Oh/6\n0If41re+xbx583jve9/Lv/7rvwLNTnbevHnMmzePj3zkI5xwwgl9/A76B/tZfc2AUr+0fPlyfvvb\n37J8+XKWLVvG8OHDiQh+9atfAbB06VKGDx++2nLTpk1b7f9yqWv2s/rSgP82cw08I0aM4JOf/CS7\n7rorgwcPZty4cYwbN45LLrmEo48+msGDB7PNNtswZ86cVZb72c9+xlNPPcU73/nOPmp5/2I/944p\nU6ZwySWXEBHsu+++fPOb3+SII47glVdeAZr/0n3ggQfyne98Z8Uy9913H2PHjmXGjBlMmDChr5q+\nwXkGpX5nyZIl3HDDDTz11FM899xz/OY3v+Gqq65iypQp3HzzzSxatIjTTz+ds88+e5Xlpk+fzoQJ\nE9h00037qOX9i/284XU1jPrDH/5wxXDpwQcfvMpw6WuvvcbkyZM58sgj+7DlvcOAUr9z2223sdtu\nuzFs2DA222wzTjjhBO666y4eeughDjroIAAmTpzI3Xffvcpy06dPd9jpdbCfe0dnw6jtXnnlFW6/\n/XaOP/74FWVf+cpXGD9+PDvuuGNfNLdXGVDqd3bddVfmzJnDsmXLyExmzZrFXnvtxdKlS/nJT34C\nwMyZM9lzzz1XLPP444+zZMkSDj744L5qdr9jP294rcOoO++8M0OGDGHcuHEr5l9//fUcfvjhbLPN\nNkBzxnX99ddz5pln9lWTe5XXoNTvHHTQQUyYMIH999+fQYMGsd9++zFp0iRGjhzJ+PHj2WSTTdh2\n22257LLLViwzbdo0TjrpJCKiD1vev9jPG17rMOrQoUM58cQTueqqqzjllFOApj8/8IEPrKj/8Y9/\nnAsuuGCjGT6NzOzrNnSpra0t586d26PX8F++r5n/8l3qO9dccw233HILl156KQBXXnklc+bM4eKL\nL+all15i991359lnn2XLLbcEYLfddqN9n/3iiy+y1VZbMXXq1FWGAPuDiLg/M9vWVs8zKK0XHgis\n2fo6ELCfu9YfD7Zah1EHDx7MrFmzaGtr9tvXXHMNxx577IpwAnjqqadWTJ922mkce+yx/S6cXg+v\nQUlSH2kdRt1333354x//yKRJkwBvNgHPoCSpT5177rmce+65q5XPnj17jctdfvnlG6ZBFTGgJKmF\nw6hr1ptDqQ7xSZKqZEBJkqpkQEmSqmRASZKqZEBJkqpkQEmSqmRASZKqZEBJkqpkQEmSqmRASZKq\nZEBJkqpkQEmSqmRASZKqZEBJkqrUo4CKiLMi4pGIWBAR0yJiy4jYLSLuiYgnImJGRGxe6m5Rni8s\n80etjzcgSRqYuh1QETEC+CjQlpn7AJsCJwEXAFMyczSwBDijLHIGsCQz3wJMKfUkSepUT4f4BgGD\nI2IQsBXwPPBO4Ntl/hXA8WX6uPKcMv/wiIgerl+SNEB1O6Ay81ngC8DTNMG0FLgf+GVmLi/VFgEj\nyvQI4Jmy7PJSf/uOrxsRkyJibkTMXbx4cXebJ0nq53oyxLctzVnRbsBw4A3AUZ1UzfZF1jBvZUHm\n1Mxsy8y2YcOGdbd5kqR+ridDfO8CnsrMxZn5B+A64M+AoWXID2Ak8FyZXgTsAlDmDwFe7sH6JUkD\nWE8C6mlgbERsVa4lHQ48CtwBTCh1TgVuKNM3lueU+bdn5mpnUJIkQc+uQd1Dc7PDA8DD5bWmApOB\nsyNiIc01pkvLIpcC25fys4FzetBuSdIAN2jtVbqWmf8C/EuH4ieBAzup+ypwYk/WJ0naePhNEpKk\nKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZ\nUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCS\npCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQqGVCSpCoZUJKkKhlQkqQq\nGVCSpCoZUJKkKhlQkqQqGVCSpCr1KKAiYmhEfDsifhwRj0XEwRGxXUTMjIgnyuO2pW5ExIURsTAi\n5kfE/uvnLUiSBqKenkF9GbglM/cA3g48BpwDzMrM0cCs8hzgKGB0+ZkEfK2H65YkDWDdDqiI2Ab4\nC+BSgMz8fWb+EjgOuKJUuwI4vkwfB1yZjTnA0IjYudstlyQNaD05g3oTsBj4ZkQ8GBGXRMQbgJ0y\n83mA8rhjqT8CeKZl+UWlbBURMSki5kbE3MWLF/egeZKk/qwnATUI2B/4WmbuB/yGlcN5nYlOynK1\ngsypmdmWmW3Dhg3rQfMkSf1ZTwJqEbAoM+8pz79NE1i/aB+6K48vtNTfpWX5kcBzPVi/JGkA63ZA\nZebPgWci4q2l6HDgUeBG4NRSdipwQ5m+EXh/uZtvLLC0fShQkqSOBvVw+Y8A34qIzYEngdNpQu/q\niDgDeBo4sdS9GTgaWAgsK3UlSepUjwIqM+cBbZ3MOryTugl8uCfrkyRtPPwmCUlSlQwoSVKVDChJ\nUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKV\nDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwo\nSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElSlQwoSVKVDChJUpUMKElS\nlQwoSVKVDChJUpV6HFARsWlEPBgRN5Xnu0XEPRHxRETMiIjNS/kW5fnCMn9UT9ctSRq41scZ1MeA\nx1qeXwBMyczRwBLgjFJ+BrAkM98CTCn1JEnqVI8CKiJGAscAl5TnAbwT+HapcgVwfJk+rjynzD+8\n1JckaTU9PYP6EvAPwB/L8+2BX2bm8vJ8ETCiTI8AngEo85eW+quIiEkRMTci5i5evLiHzZMk9Vfd\nDqiIOBZ4ITPvby3upGquw7yVBZlTM7MtM9uGDRvW3eZJkvq5QT1Y9hDgryLiaGBLYBuaM6qhETGo\nnCWNBJ4r9RcBuwCLImIQMAR4uQfrlyQNYN0+g8rMf8zMkZk5CjgJuD0z3wfcAUwo1U4FbijTN5bn\nlPm3Z+ZqZ1CSJMGG+TuoycDZEbGQ5hrTpaX8UmD7Un42cM4GWLckaYDoyRDfCpk5G5hdpp8EDuyk\nzqvAietjfZKkgc9vkpAkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJ\ngJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCS\nJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRV\nyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFWp2wEVEbtExB0R8VhEPBIRHyvl20XE\nzIh4ojxuW8ojIi6MiIURMT8i9l9fb0KSNPD05AxqOfCJzNwTGAt8OCL2As4BZmXmaGBWeQ5wFDC6\n/EwCvtaDdUuSBrhuB1RmPp+ZD5TpV4DHgBHAccAVpdoVwPFl+jjgymzMAYZGxM7dbrkkaUBbL9eg\nImIUsB9wD7BTZj4PTYgBO5ZqI4BnWhZbVMokSVpNjwMqIrYGrgU+npm/WlPVTsqyk9ebFBFzI2Lu\n4sWLe9o8SVI/1aOAiojNaMLpW5l5XSn+RfvQXXl8oZQvAnZpWXwk8FzH18zMqZnZlpltw4YN60nz\nJEn9WE/u4gvgUuCxzPxiy6wbgVPL9KnADS3l7y93840FlrYPBUqS1NGgHix7CPA3wMMRMa+U/RNw\nPnB1RJwBPA2cWObdDBwNLASWAaf3YN2SpAGu2wGVmT+i8+tKAId3Uj+BD3d3fZKkjYvfJCFJqpIB\nJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJ\nqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqS\nASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgEl\nSaqSASVJqpIBJUmqkgElSaqSASVJqlKvB1REvDsiHo+IhRFxTm+vX5LUP/RqQEXEpsBXgaOAvYCT\n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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f55398b1898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':maxb[1], u'louvain': mal[1], u'spin glass':masp[1], u'leading eigenvectors':male[1]}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Сonverting test prediction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "metadata": {},
   "outputs": [],
   "source": [
    "t0 = \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/fast greedy/1357.csv\"\n",
    "test_path = \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/test\"\n",
    "test_ego, test_circles = read_prediction(t0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1357"
      ]
     },
     "execution_count": 604,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_ego"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def read_prediction(path):\n",
    "    circles = []\n",
    "    df = pd.read_csv(path, names = [\"friend\", \"group\"], skiprows = 1)\n",
    "    ego = df[\"friend\"][0]\n",
    "    df = df.drop(df.index[0])\n",
    "    num_groups = df[\"group\"].max(axis = 0)\n",
    "    for i in range(1, num_groups + 1):\n",
    "        circles += [set(df[\"friend\"][df[\"group\"] == i])]\n",
    "    return ego, circles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def test_write(test_path, method):\n",
    "    test_names = [fyle[:-len(\".csv\")] for fyle in listdir(test_path) if fyle.endswith('.csv')]\n",
    "    for tname in test_names:    \n",
    "        t_p = os.path.join(test_path, tname + '.csv')\n",
    "        pr = read_prediction(t_p)\n",
    "        filename = \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/test/test\" + \"_{}.csv\".format(method)\n",
    "        with open(filename, \"a\") as f:\n",
    "            f.write(\"%s,\" %pr[0])\n",
    "            for item in pr[1]:\n",
    "                s = len(item)\n",
    "                for i in range(s):\n",
    "                    elem = item.pop()\n",
    "                    f.write(\"%s\" % elem)\n",
    "                    if i < s-1:\n",
    "                        f.write(\" \")\n",
    "                f.write(\";\")\n",
    "#     return cost_metr, losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_write(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/fast greedy\", \"fast_gred\")\n",
    "test_write(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/leading eigenv\", \"leading eigenv\")\n",
    "test_write(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/louvain\", \"louvain\")\n",
    "test_write(\"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/spinglass\", \"spinglass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 609,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def comparing_results(true_path, pred_path):\n",
    "    tr_files = [fyle for fyle in listdir(true_path)]\n",
    "    pr_files = [fyle for fyle in listdir(pred_path)]\n",
    "    \n",
    "    tr_f_names = [fyle[:-len(\".circles\")] for fyle in listdir(true_path) if fyle.endswith('.circles')]\n",
    "    pr_f_names = [fyle[:-len(\".csv\")] for fyle in listdir(pred_path) if fyle.endswith('.csv')]\n",
    "    \n",
    "    if len(tr_f_names) != len(pr_f_names):\n",
    "        print(\"Different numbers of predicted and true files\")\n",
    "    \n",
    "    cost_metr = []\n",
    "    losses = 0\n",
    "    for pr_f_name in pr_f_names:\n",
    "        tr_p = os.path.join(true_path,pr_f_name + '.circles')\n",
    "        pr_p = os.path.join(pred_path,pr_f_name + '.csv')\n",
    "        \n",
    "        tr = read_true_circles(tr_p)\n",
    "        pr = read_prediction(pr_p)\n",
    "        ll = loss1(tr, pr[1])\n",
    "        cost_metr += [(pr_f_name, ll)]\n",
    "        losses += ll\n",
    "    return cost_metr, losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 631,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4101"
      ]
     },
     "execution_count": 631,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_comp_fsgr, test_total_fsgr = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/fast greedy\")\n",
    "test_total_fsgr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4079"
      ]
     },
     "execution_count": 628,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_comp_spgl, test_total_spgl = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/spinglass\")\n",
    "test_total_spgl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 629,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4313"
      ]
     },
     "execution_count": 629,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test__comp_le, test_total_le = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/leading eigenv\")\n",
    "test_total_le"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 630,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Different numbers of predicted and true files\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4245"
      ]
     },
     "execution_count": 630,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test__comp_louv, test_total_louv = comparing_results(\"/home/administrator/Desktop/kaggle/data/Training\", \"/home/administrator/Dropbox/DataRoot University/kaggle/NEW/test_results/louvain\")\n",
    "test_total_louv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAacAAAEYCAYAAAD4czk4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAHadJREFUeJzt3XuYFdWd7vHvK3g3StQ2QUARxTsI\nSgSiRoIG0TjqURwxOqIhKsaoOEdHEz2JSSYTNTli1JjRowaCGfCWBETUEJQYMSAo0CpoIF5bHQVF\njeMN8Hf+qNXtptlNN9C9e9G8n+fpZ9detapqVe3a9VbVrqpWRGBmZpaTjVq7AWZmZvU5nMzMLDsO\nJzMzy47DyczMsuNwMjOz7DiczMwsOw4nMzPLjsPJzMyy43AyM7PstG/tBqzO9ttvH127dm3tZpiZ\nWTN44oknlkREVVPqZh1OXbt2Zfbs2a3dDDOzZrVixQr69OlDp06dmDRpEsOHD2f27NlEBLvvvjuj\nR49mq6224pFHHmHkyJFUV1czfvx4hgwZAsBLL73E8ccfz4oVK1i2bBnnnXceI0aMaOW5apykl5pa\n16f1zMwq7Be/+AV77bVX3ftRo0Yxb948qqur2WmnnbjhhhsA2GmnnRg9ejTf+MY3Vhq+Y8eOPPbY\nY8ydO5eZM2dy5ZVX8tprr1V0Hlqaw8nMrIJqamq47777+Na3vlVXtvXWWwMQEXz44YdIAoqzRz17\n9mSjjVbeVG+yySZsuummAHz88cd8+umnFWp95TiczMwqaOTIkVx99dWrBM4ZZ5zBF7/4RZ599lnO\nO++8Rsfzyiuv0LNnT7p06cIll1zCjjvu2FJNbhUOJ1tvrFixgt69e3P00UcDcMopp7DHHnuw7777\n8s1vfpNly5atVH/WrFm0a9eOu+++u66sXbt29OrVi169enHMMcdUtP1mkyZNYocdduCAAw5Ypd+v\nf/1rXnvtNfbaay/uuOOORsfVpUsXqqurWbRoEWPGjOGNN95oiSa3GoeTrTfqn6c/5ZRTePbZZ3nq\nqaf48MMPueWWW+r6rVixgksuuYQjjjhipXFsvvnmzJ07l7lz5zJx4sSKtd0MYPr06UycOJGuXbsy\ndOhQHnroIU499dS6/u3ateOkk07innvuafI4d9xxR/bZZx/+8pe/tESTW43DydYL5c7TH3XUUUhC\nEgceeCA1NTV1/a6//npOOOEEdthhh9ZorllZP/3pT6mpqeHFF19k/PjxDBw4kLFjx7Jo0SKg+M3p\n3nvvZc8991zteGpqavjwww8BWLp0KdOnT2ePPfZo8fZXksPJ1gsNnacHWLZsGWPHjmXw4MEAvPrq\nq/z+978ve2ntRx99RJ8+fejXrx9/+MMfWrzdZo2JCIYNG0aPHj3o0aMHr7/+Ot///veB4tR0586d\nueuuuzj77LPZZ599AFiwYAF9+/Zlv/3249BDD+Wiiy6iR48erTkbzS7r+5zMYOXz9NOmTVul/7e/\n/W2+8pWvcMghhwBFkF111VW0a9dulbovv/wyO+64I88//zwDBw6kR48e7Lrrri09C2arGDBgAAMG\nDACK033lfOlLX1rpjECtr33ta1RXV7dk81qdw8myV3uefvLkyXz00Ue89957nHrqqdx+++388Ic/\nZPHixdx000119WfPns3QoUMBWLJkCZMnT6Z9+/Ycd9xxdVc0devWjQEDBjBnzhyHk1mGFBGt3YYG\n9enTJ/yECCs1bdo0fv7znzNp0iRuueUWbrvtNqZOncrmm29etv7pp5/O0UcfzZAhQ1i6dClbbLEF\nm266KUuWLKF///5MmDCBvffeu8JzYbZhkvRERPRpSl0fOdl6a8SIEey88870798fgOOPP77uXH05\nCxYs4Oyzz2ajjTbi008/5dJLL3Uw2Uq6XnpfazchWy9e+fWKTs9HTs2k/rOybrjhBq699lr+/ve/\ns3jxYrbffnug+PHzggsuYPLkyWyxxRaMHj2a/fffH4DBgwczY8YMDj74YCZNmtSas2O2QXI4Naw5\nwmlNjpx8tV4zqX8PzkEHHcSf/vQndt5555Xq3X///SxcuJCFCxdy8803c84559T1u/jiixk7dmzF\n2mxWX/0bnV944QX69u1L9+7dOemkk/jkk08AuPDCC+tuZt59993p0KFD3TguueQS9t13X/bdd98m\n3UxqVo5P6zWD2ntwLrvsMq655hoAevfuXbbuhAkTOO2005BEv379eOedd3j99dfp2LEjhx12WNmr\n0dYH3uNsWKVPh6yL2p2s9957DyiC5sILL2To0KGMGDGCW2+9lXPOOYdRo0bVDXP99dczZ84cAO67\n7z6efPJJ5s6dy8cff8yhhx7KkUceWffsOLOm8pFTM1jdPTj1vfrqq3Tp0qXufefOnXn11Vdbsnlm\n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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5539b91400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':test_total_fsgr, u'louvain': test_total_louv, u'spin glass':test_total_spgl, u'leading eigenvectors':test_total_le}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height + 25, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmb = min(test_comp_fsgr, key = lambda t: t[1])\n",
    "tml = min(test_comp_louv, key = lambda t: t[1])\n",
    "tmsp = min(test_comp_spgl, key = lambda t: t[1])\n",
    "tmle = min(test__comp_le, key = lambda t: t[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEYCAYAAAAJeGK1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAF/RJREFUeJzt3XuUZWV95vHvQzeKiIpowfSooVUY\nUFDb2DYwXEIUXECM90scNBCNHW94SWRiHEdFc/EKswzRiIiwjCLgJSgqiAiyQAEb6W6ai0JIx0Fb\nKUdQCKBN85s/9i4o2iqruq4vdb6ftWqdfd7znrN/9Z599rP3Prt2paqQJKk1W813AZIkjcWAkiQ1\nyYCSJDXJgJIkNcmAkiQ1yYCSJDXJgJIkNcmAkiQ1yYCSJDVp8VzO7JGPfGQtXbp0LmcpSWrM5Zdf\n/vOqGpqo35wG1NKlS1m1atVczlKS1Jgk/zGZfhMe4kuyTZLLkqxJclWSY/r2k5P8e5LV/c+y6RYt\nSYPozjvvZMWKFTzlKU9hjz324F3vetd9Hj/qqKPYbrvt5qm6+TOZPahfA8+oqtuSbA1clOTr/WNH\nV9XnZ688SVr4HvjAB/Ktb32L7bbbjo0bN7Lffvtx6KGHsvfee7Nq1SpuueWW+S5xXky4B1Wd2/q7\nW/c/XgJdkmZIknv2kDZu3MjGjRtJwqZNmzj66KP5wAc+MM8Vzo9JncWXZFGS1cBNwLlVdWn/0N8l\nWZvkuCQPHOe5K5OsSrJqeHh4hsqWpIVl06ZNLFu2jB133JGDDz6Yvfbai+OPP57nPOc5LFmyZL7L\nmxeTCqiq2lRVy4BHAyuS7An8DbA78HRgB+Cvx3nuCVW1vKqWDw1NeNKGJA2kRYsWsXr1am688UYu\nu+wyLrzwQs444wyOOuqo+S5t3mzR30FV1S3ABcAhVbWhP/z3a+BTwIpZqE+SBsr222/PgQceyPnn\nn8/111/PLrvswtKlS7n99tvZZZdd5ru8OTWZs/iGkmzfTz8IOAi4NsmSvi3A84B1s1moJC1Uw8PD\n95wIcccdd/DNb36Tpz3tafz0pz9l/fr1rF+/nm233Zbrr79+niudW5M5i28JcEqSRXSBdnpVnZXk\nW0mGgACrgdfMYp2StGBt2LCBI444gk2bNnH33Xfzkpe8hGc/+9nzXda8S9XcnZC3fPny8g91JWmw\nJbm8qpZP1M9r8UmSmjSnlzqSpBYtfdtX57uE+4317/ujOZuXe1CSpCYZUJKkJhlQkqQmGVBbaLyr\nDh9++OHstttu7Lnnnrzyla9k48aN81zpwuGYzy3HW60woLbQyFWH16xZw+rVqzn77LO55JJLOPzw\nw7n22mu58sorueOOOzjxxBPnu9QFwzGfW463WuFZfFtovKsOH3bYYff0WbFiBTfeeON8lbjgOOZz\ny/FWK9yDmoKxrjo8YuPGjXz605/mkEMOmccKFx7HfG453mqBATUFm191eN26ey9D+LrXvY4DDjiA\n/ffffx4rXHgc87nleKsFBtQ0jFx1+OyzzwbgmGOOYXh4mGOPPXaeK1u4HPO55XhrPhlQW2isqw7v\nvvvunHjiiZxzzjmceuqpbLWVwzqTHPO55XirFZ4ksYXGu+rw4sWL2Xnnndlnn30AeMELXsA73/nO\nea52YXDM55bjrVZ4NXNJA89r8U3eTFyLb7JXM79f7kG5ME3OTF3U0fGenJm8iKZjPjlzeeFSzT0P\nJEuSmmRASZKaZEBJkppkQEmSmmRASZKaZEBJkppkQEmSmmRASZKaZEBJkppkQEmSmjRhQCXZJsll\nSdYkuSrJMX37Y5NcmuS6JKclecDslytJGhST2YP6NfCMqnoKsAw4JMnewPuB46pqV+Bm4FWzV6Yk\nadBMGFDVua2/u3X/U8AzgM/37acAz5uVCiVJA2lS30ElWZRkNXATcC7wb8AtVXVX3+VG4FHjPHdl\nklVJVg0PD89EzZKkATCpgKqqTVW1DHg0sAJ4wljdxnnuCVW1vKqWDw0NTb1SSdJA2aKz+KrqFuAC\nYG9g+yQj/0/q0cBPZrY0SdIgm8xZfENJtu+nHwQcBFwDnA+8qO92BHDmbBUpSRo8k/mPukuAU5Is\nogu006vqrCRXA59L8rfAFcAnZ7FOSdKAmTCgqmot8NQx2m+g+z5KkqQZ55UkJElNMqAkSU0yoCRJ\nTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0y\noCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNmjCg\nkjwmyflJrklyVZI39e3vTvLjJKv7n8Nmv1xJ0qBYPIk+dwF/VVXfT/IQ4PIk5/aPHVdVH5q98iRJ\ng2rCgKqqDcCGfvrWJNcAj5rtwiRJg22LvoNKshR4KnBp3/SGJGuTnJTk4TNcmyRpgE06oJJsB3wB\neHNV/Qr4GPB4YBndHtaHx3neyiSrkqwaHh6egZIlSYNgUgGVZGu6cPpMVX0RoKp+VlWbqupu4BPA\nirGeW1UnVNXyqlo+NDQ0U3VLkha4yZzFF+CTwDVVdeyo9iWjuj0fWDfz5UmSBtVkzuLbF3gFcGWS\n1X3b24GXJVkGFLAe+ItZqVCSNJAmcxbfRUDGeOhrM1+OJEkdryQhSWqSASVJapIBJUlqkgElSWqS\nASVJapIBJUlqkgElSWqSASVJapIBJUlqkgElSWqSASVJapIBJUlqkgElSWqSASVJapIBJUlqkgEl\nSWqSASVJapIBJUlqkgElSWqSASVJapIBJUlqkgElSWqSASVJapIBJUlqkgElSWqSASVJatKEAZXk\nMUnOT3JNkquSvKlv3yHJuUmu628fPvvlSpIGxWT2oO4C/qqqngDsDbw+yROBtwHnVdWuwHn9fUmS\nZsSEAVVVG6rq+/30rcA1wKOA5wKn9N1OAZ43W0VKkgbPFn0HlWQp8FTgUmCnqtoAXYgBO47znJVJ\nViVZNTw8PL1qJUkDY9IBlWQ74AvAm6vqV5N9XlWdUFXLq2r50NDQVGqUJA2gSQVUkq3pwukzVfXF\nvvlnSZb0jy8BbpqdEiVJg2gyZ/EF+CRwTVUdO+qhLwNH9NNHAGfOfHmSpEG1eBJ99gVeAVyZZHXf\n9nbgfcDpSV4F/Ah48eyUKEkaRBMGVFVdBGSch585s+VIktTxShKSpCYZUJKkJhlQkqQmGVCSpCYZ\nUJKkJhlQkqQmGVCSpCYZUJKkJhlQkqQmGVCSpCYZUJKkJhlQkqQmGVCSpCYZUJKkJhlQkqQmGVCS\npCYZUJKkJhlQkqQmGVCSpCYZUJKkJhlQkqQmGVCSpCYZUJKkJhlQkqQmGVCSpCZNGFBJTkpyU5J1\no9reneTHSVb3P4fNbpmSpEEzmT2ok4FDxmg/rqqW9T9fm9myJEmDbsKAqqoLgV/MQS2SJN1jOt9B\nvSHJ2v4Q4MPH65RkZZJVSVYNDw9PY3aSpEEy1YD6GPB4YBmwAfjweB2r6oSqWl5Vy4eGhqY4O0nS\noJlSQFXVz6pqU1XdDXwCWDGzZUmSBt2UAirJklF3nw+sG6+vJElTsXiiDklOBQ4EHpnkRuBdwIFJ\nlgEFrAf+YhZrlCQNoAkDqqpeNkbzJ2ehFkmS7uGVJCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAk\nSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElN\nMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNmjCgkpyU5KYk60a1\n7ZDk3CTX9bcPn90yJUmDZjJ7UCcDh2zW9jbgvKraFTivvy9J0oyZMKCq6kLgF5s1Pxc4pZ8+BXje\nDNclSRpwU/0Oaqeq2gDQ3+44XsckK5OsSrJqeHh4irOTJA2aWT9JoqpOqKrlVbV8aGhotmcnSVog\nphpQP0uyBKC/vWnmSpIkaeoB9WXgiH76CODMmSlHkqTOZE4zPxX4LrBbkhuTvAp4H3BwkuuAg/v7\nkiTNmMUTdaiql43z0DNnuBZJku7hlSQkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0y\noCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAk\nSU0yoCRJTTKgJElNMqAkSU0yoCRJTTKgJElNMqAkSU1aPJ0nJ1kP3ApsAu6qquUzUZQkSdMKqN4f\nVtXPZ+B1JEm6h4f4JElNmm5AFfCNJJcnWTlWhyQrk6xKsmp4eHias5MkDYrpBtS+VfX7wKHA65Mc\nsHmHqjqhqpZX1fKhoaFpzk6SNCimFVBV9ZP+9ibgS8CKmShKkqQpB1SSByd5yMg08Cxg3UwVJkka\nbNM5i28n4EtJRl7ns1V19oxUJUkaeFMOqKq6AXjKDNYiSdI9PM1cktQkA0qS1CQDSpLUJANKktQk\nA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANK\nktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1CQDSpLUJANKktQkA0qS1KRpBVSS\nQ5L8IMn1Sd42U0VJkjTlgEqyCPgn4FDgicDLkjxxpgqTJA226exBrQCur6obquo3wOeA585MWZKk\nQZeqmtoTkxcBh1TVn/f3XwHsVVVv2KzfSmBlf3c34AdTL7dpjwR+Pt9FDBDHe+455nNrIY/3zlU1\n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\nkpr0/wGgWzTpOJAWNAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f55398e5160>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':tmb[1], u'louvain': tml[1], u'spin glass':tmsp[1], u'leading eigenvectors':tmle[1]}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmaxb = max(test_comp_fsgr, key = lambda t: t[1])\n",
    "tmal = max(test_comp_louv, key = lambda t: t[1])\n",
    "tmasp = max(test_comp_spgl, key = lambda t: t[1])\n",
    "tmale = max(test__comp_le, key = lambda t: t[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nzCOPPMLUqVPZYost+rPJGmC6PILKzEeBvTop/x0wvpPyBM7qkdZtYl5tT/Oiiy5i1qxZDB06lO22\n227N3WbaMPa1NPB164e6vc0f6krr5q3PXeupW5/t6671RF9394e6A+Z+UBesrvXk7xfs71fXl78V\nkQYqn8UnSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJ\nqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqS\nASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgElSaqSASVJqpIBJUmqkgEl\nSaqSASVJqpIBJUmqUrcDKiKGRMQ9ETG7jL85Im6PiMURcWVEvKaUb1HGl5TpI3un6ZKkgWx9jqDO\nBh5qGT8fmJKZo4CVwGml/DRgZWa+FZhS6kmStF66FVARsTNwFDC1jAdwMHB1qTIdOLYMH1PGKdPH\nl/qSJHVbd4+g/hH4W+DFMr498PvMfKGMtwMjyvAI4DGAMn1Vqf8yETExIhZExIIVK1ZsYPMlSQNV\nlwEVEUcDyzPzrtbiTqpmN6a9VJB5aWaOzcyxbW1t3WqsJGnwGNqNOgcCH4iII4Etga1pjqi2jYih\n5ShpZ+DxUr8d2AVoj4ihwDbAUz3ecknSgNblEVRmfi4zd87MkcDJwA2Z+WHgRuCEUm0CMLMMzyrj\nlOk3ZOYrjqAkSXo1G/M7qPOAcyNiCc01pu+V8u8B25fyc4FJG9dESdJg1J1TfGtk5nxgfhl+FNiv\nkzrPAyf2QNskSYOYT5KQJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRV\nyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmA\nkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIk\nVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFWpy4CKiC0j4o6IWBgRD0TE35XyN0fE7RGxOCKujIjX\nlPItyviSMn1k734FSdJA1J0jqP8EDs7MvYAxwOERcQBwPjAlM0cBK4HTSv3TgJWZ+VZgSqknSdJ6\n6TKgsvFsGd28/EvgYODqUj4dOLYMH1PGKdPHR0T0WIslSYNCt65BRcSQiLgXWA7MBf4d+H1mvlCq\ntAMjyvAI4DGAMn0VsH0nnzkxIhZExIIVK1Zs3LeQJA043QqozFydmWOAnYH9gNGdVSuvnR0t5SsK\nMi/NzLGZObatra277ZUkDRLrdRdfZv4emA8cAGwbEUPLpJ2Bx8twO7ALQJm+DfBUTzRWkjR4dOcu\nvraI2LYMbwUcAjwE3AicUKpNAGaW4VllnDL9hsx8xRGUJEmvZmjXVRgOTI+IITSBdlVmzo6IB4Er\nIuIrwD3A90r97wE/jIglNEdOJ/dCuyVJA1yXAZWZi4C9Oyl/lOZ61NrlzwMn9kjrJEmDlk+SkCRV\nyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmA\nkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIk\nVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJ\ngJIkVcmAkiRVyYCSJFWpy4CKiF0i4saIeCgiHoiIs0v5dhExNyIWl9c3lvKIiIsiYklELIqIfXr7\nS0iSBp7uHEG9APyPzBwNHACcFRFvByYB8zJzFDCvjAMcAYwq/yYC3+7xVkuSBrwuAyozl2Xm3WX4\nGeAhYARwDDC9VJsOHFuGjwF+kI3bgG0jYniPt1ySNKCt1zWoiBgJ7A3cDuyYmcugCTFgWKk2Anis\n5W3tpWztz5oYEQsiYsGKFSvWv+WSpAGt2wEVEa8HZgDnZObTr1a1k7J8RUHmpZk5NjPHtrW1dbcZ\nkqRBolsBFRGb04TTv2TmNaX4iY5Td+V1eSlvB3ZpefvOwOM901xJ0mDRnbv4Avge8FBmXtgyaRYw\noQxPAGa2lH+03M13ALCq41SgJEndNbQbdQ4E/hq4LyLuLWWfByYDV0XEacBvgBPLtDnAkcAS4Dng\n1B5tsSRpUOgyoDLzFjq/rgQwvpP6CZy1ke2SJA1yPklCklQlA0qSVCUDSpJUJQNKklQlA0qSVCUD\nSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qS\nVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQl\nA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklQlA0qSVCUDSpJUJQNKklSlLgMqIi6LiOURcX9L\n2XYRMTciFpfXN5byiIiLImJJRCyKiH16s/GSpIGrO0dQ04DD1yqbBMzLzFHAvDIOcAQwqvybCHy7\nZ5opSRpsugyozLwZeGqt4mOA6WV4OnBsS/kPsnEbsG1EDO+pxkqSBo8NvQa1Y2YuAyivw0r5COCx\nlnrtpewVImJiRCyIiAUrVqzYwGZIkgaqnr5JIjopy84qZualmTk2M8e2tbX1cDMkSZu6DQ2oJzpO\n3ZXX5aW8Hdilpd7OwOMb3jxJ0mC1oQE1C5hQhicAM1vKP1ru5jsAWNVxKlCSpPUxtKsKEXE5MA7Y\nISLagf8DTAauiojTgN8AJ5bqc4AjgSXAc8CpvdBmSdIg0GVAZeaH1jFpfCd1EzhrYxslSZJPkpAk\nVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJ\ngJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCS\nJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRVyYCSJFXJgJIkVcmAkiRV\nyYCSJFXJgJIkVcmAkiRVqVcCKiIOj4hfRsSSiJjUG/OQJA1sPR5QETEE+BZwBPB24EMR8faeno8k\naWDrjSOo/YAlmfloZv4JuAI4phfmI0kawCIze/YDI04ADs/Mj5fxvwb2z8xPrlVvIjCxjL4N+GWP\nNqQOOwBP9ncjBgn7uu/Y131noPb1mzKzratKQ3thxtFJ2StSMDMvBS7thflXIyIWZObY/m7HYGBf\n9x37uu8M9r7ujVN87cAuLeM7A4/3wnwkSQNYbwTUncCoiHhzRLwGOBmY1QvzkSQNYD1+ii8zX4iI\nTwI/A4YAl2XmAz09n03EgD6FWRn7uu/Y131nUPd1j98kIUlST/BJEpKkKhlQkqQqDaqAiohPRcRD\nEfEv6/m+bSPiE73VrvVox/yIGHC3nEbEs304r6k+2eQlEXFGRHy0hz6riuWzp5aniDglIi4uwz3W\n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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f55398ece48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dictionary = plt.figure()\n",
    "\n",
    "D = {u'fast greedy':tmaxb[1], u'louvain': tmal[1], u'spin glass':tmasp[1], u'leading eigenvectors':tmale[1]}\n",
    "\n",
    "b1 = plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys())\n",
    "for rect in b1:\n",
    "    height = rect.get_height()\n",
    "    plt.text(rect.get_x() + rect.get_width()/2.0, height, '%d' % int(height), ha='center', va='bottom')\n",
    "\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 702,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "OBpath = \"/home/administrator/Desktop/kaggle/data/features.txt\"\n",
    "FLpath = \"/home/administrator/Desktop/kaggle/data/featureList.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def create_np_df(OBpath, FLpath):\n",
    "    ob = open(OBpath, \"r\")\n",
    "    fl = open(FLpath, \"r\")\n",
    "    obs = [line[ : -1] for line in ob.readlines()]\n",
    "    flist = [line[ : -1] for line in fl.readlines()]\n",
    "    features_names = [elem.replace(\";\", \" \") for elem in flist]\n",
    "    olen = len(obs)\n",
    "    flen = len(flist)\n",
    "    feature_matrix = np.zeros((olen, flen), dtype=object)\n",
    "    m = np.zeros((olen, flen), dtype=object)\n",
    "    for k in range(olen):\n",
    "        for i in range(flen):\n",
    "            nel = [m.start() for m in re.finditer(flist[i], obs[k])]\n",
    "            nelen = len(nel) \n",
    "            if nelen == 0:\n",
    "                m[k][i] = \"NA\"\n",
    "            else:\n",
    "                list_elem = []\n",
    "                for j in range(nelen):\n",
    "                    element = obs[k][nel[j] - 1 : nel[j] + len(flist[i]) + 2]\n",
    "                    if re.match(r\" \", element) and re.match(r\"[0-9]+\", obs[k][ nel[j] + len(flist[i]) + 1 : nel[j] + len(flist[i]) + 2]):\n",
    "                        list_elem += list(map(int, obs[k][nel[j] + len(flist[i]) + 1 : nel[j] + len(flist[i]) + 2]))\n",
    "                if len(list_elem) == 0:\n",
    "                    m[k][i] = \"NA\"\n",
    "                else:\n",
    "                    m[k][i] = list_elem\n",
    "    return m, features_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def to_pd_df(OBpath, FLpath):\n",
    "    df1, nam = create_np_df(OBpath, FLpath)\n",
    "    df = pd.DataFrame(df1, columns=nam)\n",
    "    df2 = pd.read_csv(OBpath, sep = \"|\", header = None, names = [\"A\"])\n",
    "    df2 = df2.A.str.split(' ', expand=True)\n",
    "    df[\"id\"] = df2[0]\n",
    "    df.to_csv('/home/administrator/Desktop/kaggle/NEW/all_features.csv')\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>birthday</th>\n",
       "      <th>education classes description</th>\n",
       "      <th>education classes from id</th>\n",
       "      <th>education classes from name</th>\n",
       "      <th>education classes id</th>\n",
       "      <th>education classes name</th>\n",
       "      <th>education classes with id</th>\n",
       "      <th>education classes with name</th>\n",
       "      <th>education concentration id</th>\n",
       "      <th>education concentration name</th>\n",
       "      <th>...</th>\n",
       "      <th>work projects from id</th>\n",
       "      <th>work projects from name</th>\n",
       "      <th>work projects id</th>\n",
       "      <th>work projects name</th>\n",
       "      <th>work projects start_date</th>\n",
       "      <th>work projects with id</th>\n",
       "      <th>work projects with name</th>\n",
       "      <th>work start_date</th>\n",
       "      <th>work with id</th>\n",
       "      <th>work with name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[0]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>...</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[1]</td>\n",
       "      <td>NA</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[1, 2]</td>\n",
       "      <td>[1, 2]</td>\n",
       "      <td>...</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[2]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[1, 2]</td>\n",
       "      <td>[1, 2]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>...</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[0, 1]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[3]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[3]</td>\n",
       "      <td>[3]</td>\n",
       "      <td>...</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[2]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[4]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[4, 4]</td>\n",
       "      <td>[4, 4]</td>\n",
       "      <td>...</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>[3]</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 57 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  birthday education classes description education classes from id  \\\n",
       "0      [0]                            NA                        NA   \n",
       "1      [1]                            NA                       [0]   \n",
       "2      [2]                            NA                        NA   \n",
       "3      [3]                            NA                        NA   \n",
       "4      [4]                            NA                        NA   \n",
       "\n",
       "  education classes from name education classes id education classes name  \\\n",
       "0                          NA                   NA                     NA   \n",
       "1                         [0]                  [0]                    [0]   \n",
       "2                          NA               [1, 2]                 [1, 2]   \n",
       "3                          NA                   NA                     NA   \n",
       "4                          NA                   NA                     NA   \n",
       "\n",
       "  education classes with id education classes with name  \\\n",
       "0                        NA                          NA   \n",
       "1                       [0]                         [0]   \n",
       "2                        NA                          NA   \n",
       "3                        NA                          NA   \n",
       "4                        NA                          NA   \n",
       "\n",
       "  education concentration id education concentration name      ...        \\\n",
       "0                        [0]                          [0]      ...         \n",
       "1                     [1, 2]                       [1, 2]      ...         \n",
       "2                         NA                           NA      ...         \n",
       "3                        [3]                          [3]      ...         \n",
       "4                     [4, 4]                       [4, 4]      ...         \n",
       "\n",
       "  work projects from id work projects from name work projects id  \\\n",
       "0                    NA                      NA               NA   \n",
       "1                    NA                      NA               NA   \n",
       "2                    NA                      NA               NA   \n",
       "3                    NA                      NA               NA   \n",
       "4                    NA                      NA               NA   \n",
       "\n",
       "  work projects name work projects start_date work projects with id  \\\n",
       "0                 NA                       NA                    NA   \n",
       "1                 NA                       NA                    NA   \n",
       "2                 NA                       NA                    NA   \n",
       "3                 NA                       NA                    NA   \n",
       "4                 NA                       NA                    NA   \n",
       "\n",
       "  work projects with name work start_date work with id work with name  \n",
       "0                      NA              NA           NA             NA  \n",
       "1                      NA              NA           NA             NA  \n",
       "2                      NA          [0, 1]           NA             NA  \n",
       "3                      NA             [2]           NA             NA  \n",
       "4                      NA             [3]           NA             NA  \n",
       "\n",
       "[5 rows x 57 columns]"
      ]
     },
     "execution_count": 705,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = to_pd_df(OBpath, FLpath)\n",
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
